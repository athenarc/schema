apiVersion: v1
stringData:
  configuration.json: |
    {
      "registry": "{{ .Values.registry.app_name }}.{{ .Values.schema.app_name }}.{{ .Values.domain }}",
      "registryAuth": {
        "username": "{{ .Values.registry.deployment.username }}",
        "password": "{{ .Values.registry.deployment.password }}"
      },
      "database": {
        "host": "{{ .Values.postgres.app_name }}",
        "username": "{{ .Values.postgres.deployment.dbUsername }}",
        "password": "{{ .Values.postgres.deployment.dbPassword }}",
        "database": "{{ .Values.postgres.deployment.dbName }}"
      },
      "localftp": {
        "active": {{ .Values.ftp.active }},
        "domain": "{{ .Values.ftp.deployment.domain }}",
        "username": "{{ .Values.ftp.deployment.username }}",
        "password": "{{ .Values.ftp.deployment.password }}"
      },
      "imagePullSecrets": [
        {
          "name": "registry-creds"
        }
      ],
      "ftp-creds": {
        "{{ .Values.ftp.deployment.domain }}": {
          "username": "{{ .Values.ftp.deployment.username }}",
          "password": "{{ .Values.ftp.deployment.password }}"
        }
      },
      "namespaces": {
        "registry": "{{ .Values.namespaces.registry }}",
        "jobs": "{{ .Values.namespaces.jobs }}",
        "tesk": "{{ .Values.namespaces.tesk }}",
        "jupyter": "{{ .Values.namespaces.jupyter }}"

      },
      "jupyter":
      {
          "domain": "{{ .Values.jupyter.app_name }}.{{ .Values.domain }}"
      },
      {{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
      "platform": "kubernetes" 
      {{- else if .Capabilities.APIVersions.Has "route.openshift.io/v1/Route" }} 
      "platform": "openshift" 
      {{- else }}
      "platform": ""
      {{- end }}
    }
  db.php: |
    <?php

    return [
        'class' => 'yii\db\Connection',
        'dsn' => 'pgsql:host=postgres;dbname={{ .Values.postgres.deployment.dbName }}',
        'username' => '{{ .Values.postgres.deployment.dbUsername }}',
        'password' => '{{ .Values.postgres.deployment.dbPassword }}',
        'charset' => 'utf8',

        // Schema cache options (for production environment)
        //'enableSchemaCache' => true,
        //'schemaCacheDuration' => 60,
        //'schemaCache' => 'cache',
    ];
  params.php: |
    <?php

    return [
        /*
         * The following parameters must be left unchanged
         */
        'bsDependencyEnabled' => false,
        'adminEmail' => 'admin@example.com',
        'userDataPath' => '/data/docker/user-data/',
        'tmpFolderPath' => '/data/docker/tmp/',
        'ROCratesFolder' => '/data/docker/RO-crates/',
        'profilesFolderPath' => '/data/docker/profiles',
        'tmpImagePath' => '/data/docker/tmp-images/',
        'tmpWorkflowPath' => '/data/docker/workflows/',
        'scriptsFolder' => '/app/web/schema/scheduler_files/',
        'workflowsFolder' => '/data/docker/workflows',
        'archivedWorkflowsFolder' => '/data/docker/archived_workflows',
        'systemUser' => 'root',
        'nfsIp' => '{{ .Values.nfsIp }}',
        /*
         * Change the following parameters according to your installation
         */
        'ftpLocal' => {{ .Values.ftp.active }},
        'ftpIp' => '{{ .Values.ftp.deployment.domain }}',
        'ftpUser' => '{{ .Values.ftp.deployment.username }}',
        'ftpPass' => '{{ .Values.ftp.deployment.password }}',
        'teskEndpoint' => '{{ .Values.tesk.url }}',
        'wesEndpoint' => '{{ .Values.wes.url }}',
        'standalone' => {{ .Values.standalone.isStandalone }},
        'logo-footer' => 'img/elixir-dark.png',
        'name' => 'SCHeMa scheduler',
        'copyright' => 'Athena RC 2021',
        'standaloneResources'=>
        [
            'maxCores'=> {{ .Values.standalone.resources.maxCores }},
            'maxRam' => {{ .Values.standalone.resources.maxRam }},
        ],
        'classifierMemLimit'=>8,
        'metrics_url' => '{{ .Values.metrics.url }}',
        'namespaces' => [
            'jobs'=>'{{ .Values.namespaces.jobs }}',
            'jupyter' => '{{ .Values.namespaces.jupyter }}'
        ],
        'jobFileStore'=>'{{ .Values.schema.jobFileStore }}',
        'workflows'=>
        [
          {{- if .Values.wes.CWL.enabled }}
          'CWL'=>
          [
            'endpoint'=> '{{ .Values.wes.CWL.url }}',
            'fileStore'=>'{{ .Values.wes.CWL.fileStore }}',
          ],
          {{- end }} 
          {{- if .Values.wes.Nextflow.enabled }}
          'Nextflow'=>
          [
            'endpoint'=> '{{ .Values.wes.Nextflow.url }}',
            'fileStore'=>'{{ .Values.wes.Nextflow.fileStore }}',
          ],
          {{- end }} 
          {{- if .Values.wes.SnakeMake.enabled }}
          'SnakeMake'=>
          [
            'endpoint'=> '{{ .Values.wes.SnakeMake.url }}',
            'fileStore'=>'{{ .Values.wes.SnakeMake.fileStore }}',
          ],
          {{- end }} 
          {{- if .Values.wes.WDL.enabled }}
          'WDL'=>
          [
            'endpoint'=> '{{ .Values.wes.WDL.url }}',
            'fileStore'=>'{{ .Values.wes.WDL.fileStore }}',
          ],
          {{- end }} 
        ],

    ];

    ?>
kind: Secret
metadata:
  name: schema-config
  namespace: {{ .Values.namespace }}
type: Opaque
